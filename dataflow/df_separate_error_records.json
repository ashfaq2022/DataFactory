{
	"name": "df_separate_error_records",
	"properties": {
		"description": "This data flow separates the error records to separate file.",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_src_blob_custoreerrorfile",
						"type": "DatasetReference"
					},
					"name": "ADWCustomer"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_practisedb_customer_error",
						"type": "DatasetReference"
					},
					"name": "PractiseCustomerError"
				},
				{
					"dataset": {
						"referenceName": "ds_PractiseDB_Customer",
						"type": "DatasetReference"
					},
					"name": "PractiseCustomer"
				}
			],
			"transformations": [
				{
					"name": "ConditionCheck"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"parameters{",
				"     InputFile as string ('Customer_error.txt')",
				"}",
				"source(output(",
				"          CustomerID as string,",
				"          NameStyle as string,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string,",
				"          PasswordHash as string,",
				"          PasswordSalt as string,",
				"          rowguid as string,",
				"          ModifiedDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> ADWCustomer",
				"ADWCustomer split(isNull(toInteger(CustomerID)),",
				"     disjoint: false) ~> ConditionCheck@(ErrorRecords, GoodRecords)",
				"ConditionCheck@ErrorRecords derive(InputFileName = $InputFile) ~> derivedColumn1",
				"ConditionCheck@GoodRecords derive(InputFileName = $InputFile) ~> derivedColumn2",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['TRUNCATE TABLE Customer_error'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerID,",
				"          NameStyle,",
				"          Title,",
				"          FirstName,",
				"          MiddleName,",
				"          LastName,",
				"          Suffix,",
				"          CompanyName,",
				"          SalesPerson,",
				"          EmailAddress,",
				"          Phone,",
				"          PasswordHash,",
				"          PasswordSalt,",
				"          rowguid,",
				"          ModifiedDate,",
				"          FileName = InputFileName",
				"     )) ~> PractiseCustomerError",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          IsActive as boolean,",
				"          EffectiveStartDate as timestamp,",
				"          EndDate as timestamp,",
				"          CreatedDate as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['TRUNCATE TABLE Customer'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerID,",
				"          NameStyle,",
				"          Title,",
				"          FirstName,",
				"          MiddleName,",
				"          LastName,",
				"          Suffix,",
				"          CompanyName,",
				"          SalesPerson,",
				"          EmailAddress,",
				"          Phone,",
				"          PasswordHash,",
				"          PasswordSalt,",
				"          rowguid,",
				"          ModifiedDate,",
				"          FileName = InputFileName",
				"     )) ~> PractiseCustomer"
			]
		}
	}
}