{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFMission100"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_practisedb_customer_error')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_PractiseSQLDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customer_error"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_dummyfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_mission100Datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Dummy.csv",
						"folderPath": "adventureworks/Stage",
						"fileSystem": "inputdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DataLake_Product2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_mission100Datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Product2.csv",
						"folderPath": "adventureworks",
						"fileSystem": "inputdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "ProductNumber",
						"type": "String"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "StandardCost",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Size",
						"type": "String"
					},
					{
						"name": "Weight",
						"type": "String"
					},
					{
						"name": "ProductCategoryID",
						"type": "String"
					},
					{
						"name": "ProductModelID",
						"type": "String"
					},
					{
						"name": "SellStartDate",
						"type": "String"
					},
					{
						"name": "SellEndDate",
						"type": "String"
					},
					{
						"name": "DiscontinuedDate",
						"type": "String"
					},
					{
						"name": "ThumbNailPhoto",
						"type": "String"
					},
					{
						"name": "ThumbnailPhotoFileName",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "String"
					},
					{
						"name": "ModifiedDate",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_mission100Datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Customer.csv",
						"folderPath": "PractiseStage",
						"fileSystem": "inputdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "CompanyName",
						"type": "String"
					},
					{
						"name": "SalesPerson",
						"type": "String"
					},
					{
						"name": "EmailAddress",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ADW_Archive_Parameter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_mission100Datalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "adventureworks/Archive",
						"fileSystem": "inputdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ADW_Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_mission100Datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "adventureworks/Stage",
						"fileSystem": "inputdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ADW_Stage_parameter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_mission100Datalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "adventureworks/Stage",
						"fileSystem": "inputdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_web_API')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_PipelineProcessStats_SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline records the process statistics and insert them into SQL table",
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[uspSetInsertPipelineStats]",
							"storedProcedureParameters": {
								"ADFName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineTriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineTriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_PractiseSQLDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-02T22:16:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_separate_error_records')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This data flow separates the error records to separate file.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_blob_custoreerrorfile",
								"type": "DatasetReference"
							},
							"name": "ADWCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_practisedb_customer_error",
								"type": "DatasetReference"
							},
							"name": "PractiseCustomerError"
						},
						{
							"dataset": {
								"referenceName": "ds_PractiseDB_Customer",
								"type": "DatasetReference"
							},
							"name": "PractiseCustomer"
						}
					],
					"transformations": [
						{
							"name": "ConditionCheck"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"parameters{",
						"     InputFile as string ('Customer_error.txt')",
						"}",
						"source(output(",
						"          CustomerID as string,",
						"          NameStyle as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> ADWCustomer",
						"ADWCustomer split(isNull(toInteger(CustomerID)),",
						"     disjoint: false) ~> ConditionCheck@(ErrorRecords, GoodRecords)",
						"ConditionCheck@ErrorRecords derive(InputFileName = $InputFile) ~> derivedColumn1",
						"ConditionCheck@GoodRecords derive(InputFileName = $InputFile) ~> derivedColumn2",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['TRUNCATE TABLE Customer_error'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          NameStyle,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          Suffix,",
						"          CompanyName,",
						"          SalesPerson,",
						"          EmailAddress,",
						"          Phone,",
						"          PasswordHash,",
						"          PasswordSalt,",
						"          rowguid,",
						"          ModifiedDate,",
						"          FileName = InputFileName",
						"     )) ~> PractiseCustomerError",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          IsActive as boolean,",
						"          EffectiveStartDate as timestamp,",
						"          EndDate as timestamp,",
						"          CreatedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['TRUNCATE TABLE Customer'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          NameStyle,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          Suffix,",
						"          CompanyName,",
						"          SalesPerson,",
						"          EmailAddress,",
						"          Phone,",
						"          PasswordHash,",
						"          PasswordSalt,",
						"          rowguid,",
						"          ModifiedDate,",
						"          FileName = InputFileName",
						"     )) ~> PractiseCustomer"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_practisedb_customer_error')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_pipelinestats_newCSVfile')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_blob_dummyfile",
								"type": "DatasetReference"
							},
							"name": "Dummy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_SrcDatalake_ADW_Folder",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ADFName as string,",
						"     PipelineName as string,",
						"     TriggerName as string,",
						"     TriggerTime as string,",
						"     FileName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Dummy",
						"Dummy derive(ADFName = $ADFName,",
						"          PipelineName = $PipelineName,",
						"          TriggerName = $TriggerName,",
						"          TriggerTime = $TriggerTime) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          ADFName,",
						"          PipelineName,",
						"          TriggerName,",
						"          TriggerTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($FileName)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_dummyfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_pipelinestats_appendCSVfile')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_blob_dummyfile",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						},
						{
							"dataset": {
								"referenceName": "ds_SrcDatalake_ADW_Folder",
								"type": "DatasetReference"
							},
							"name": "LogDEstinationFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_SrcDatalake_ADW_Folder",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ADFName as string,",
						"     PipelineName as string,",
						"     TriggerName as string,",
						"     TriggerTime as string,",
						"     FileName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DummySource",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LogDEstinationFile",
						"DummySource derive(ADFName = $ADFName,",
						"          PipelineName = $PipelineName,",
						"          TriggerName = $TriggerName,",
						"          TriggerTime = $TriggerTime,",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          ADFName,",
						"          PipelineName,",
						"          TriggerName,",
						"          TriggerTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, LogDEstinationFile union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($FileName)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_dummyfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_IncrementID_SurrogateKey')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_Mission100DataLake_productcsv",
								"type": "DatasetReference"
							},
							"name": "ProductOriginalFile"
						},
						{
							"dataset": {
								"referenceName": "ds_DataLake_Product2",
								"type": "DatasetReference"
							},
							"name": "ProductNewFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Mission100DataLake_productcsv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AddDummyColumn"
						},
						{
							"name": "GetMaxValue"
						},
						{
							"name": "surrogateKey"
						},
						{
							"name": "CrossJoin"
						},
						{
							"name": "NewProductID"
						},
						{
							"name": "select1"
						},
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as string,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as string,",
						"          ListPrice as string,",
						"          Size as string,",
						"          Weight as string,",
						"          ProductCategoryID as string,",
						"          ProductModelID as string,",
						"          SellStartDate as string,",
						"          SellEndDate as string,",
						"          DiscontinuedDate as string,",
						"          ThumbNailPhoto as string,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> ProductOriginalFile",
						"source(output(",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as string,",
						"          ListPrice as string,",
						"          Size as string,",
						"          Weight as string,",
						"          ProductCategoryID as string,",
						"          ProductModelID as string,",
						"          SellStartDate as string,",
						"          SellEndDate as string,",
						"          DiscontinuedDate as string,",
						"          ThumbNailPhoto as string,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ProductNewFile",
						"ProductOriginalFile derive(DummyColumn = 'Dummy') ~> AddDummyColumn",
						"AddDummyColumn aggregate(groupBy(DummyColumn),",
						"     MaxProductID = max(ProductID)) ~> GetMaxValue",
						"ProductNewFile keyGenerate(output(ProductID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey",
						"GetMaxValue, surrogateKey join(1 == 1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CrossJoin",
						"CrossJoin derive(NewProductID = toString(toInteger(MaxProductID) + toInteger(ProductID))) ~> NewProductID",
						"NewProductID select(mapColumn(",
						"          ProductID = NewProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate,",
						"          ThumbNailPhoto,",
						"          ThumbnailPhotoFileName,",
						"          rowguid,",
						"          ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"ProductOriginalFile, select1 union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductID as string,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as string,",
						"          ListPrice as string,",
						"          Size as string,",
						"          Weight as string,",
						"          ProductCategoryID as string,",
						"          ProductModelID as string,",
						"          SellStartDate as string,",
						"          SellEndDate as string,",
						"          DiscontinuedDate as string,",
						"          ThumbNailPhoto as string,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     partitionFileNames:['product.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_DataLake_Product2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_RunningTotal')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_Mission100DataLake_productcsv",
								"type": "DatasetReference"
							},
							"name": "ProductCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_SrcDatalake_ADW",
								"type": "DatasetReference"
							},
							"name": "ProductSink"
						}
					],
					"transformations": [
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as string,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as string,",
						"          ListPrice as string,",
						"          Size as string,",
						"          Weight as string,",
						"          ProductCategoryID as string,",
						"          ProductModelID as string,",
						"          SellStartDate as string,",
						"          SellEndDate as string,",
						"          DiscontinuedDate as string,",
						"          ThumbNailPhoto as string,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ProductCSV",
						"ProductCSV window(asc(ProductID, true),",
						"     RollOverSum = sum(toDecimal(ListPrice))) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string",
						"     ),",
						"     partitionFileNames:['ProductRunningTotal.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ProductSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SCD_Type_1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_customer",
								"type": "DatasetReference"
							},
							"name": "CustomerCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_PractiseDB_Customer",
								"type": "DatasetReference"
							},
							"name": "PractisseDB"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          FirstName as string,",
						"          LastName as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CustomerCSV",
						"CustomerCSV alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          IsActive as boolean,",
						"          EffectiveStartDate as timestamp,",
						"          EndDate as timestamp,",
						"          CreatedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['FirstName','LastName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          FirstName,",
						"          LastName,",
						"          CompanyName,",
						"          SalesPerson,",
						"          EmailAddress",
						"     )) ~> PractisseDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SCD_Type_2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_customer",
								"type": "DatasetReference"
							},
							"name": "CustomerInputFile"
						},
						{
							"dataset": {
								"referenceName": "ds_PractiseDB_Customer",
								"type": "DatasetReference"
							},
							"name": "PractoseDBCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_PractiseDB_Customer",
								"type": "DatasetReference"
							},
							"name": "PractiseCustomerTable"
						},
						{
							"dataset": {
								"referenceName": "ds_PractiseDB_Customer",
								"type": "DatasetReference"
							},
							"name": "PractiseCustomerTableExisting"
						}
					],
					"transformations": [
						{
							"name": "GenerateFileHash"
						},
						{
							"name": "GenerateTableHash"
						},
						{
							"name": "CheckIfHaskKeyexists"
						},
						{
							"name": "AddIsActive"
						},
						{
							"name": "select1"
						},
						{
							"name": "CheckTblrecordVsSelect1"
						},
						{
							"name": "AddIsActive0"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          FirstName as string,",
						"          LastName as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CustomerInputFile",
						"source(output(",
						"          CustomerID as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          IsActive as boolean,",
						"          EffectiveStartDate as timestamp,",
						"          EndDate as timestamp,",
						"          CreatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> PractoseDBCustomer",
						"CustomerInputFile derive(HashKey = md5(FirstName,LastName,CompanyName,SalesPerson,EmailAddress)) ~> GenerateFileHash",
						"PractoseDBCustomer derive(HashKey = md5(FirstName,LastName,CompanyName,SalesPerson,EmailAddress)) ~> GenerateTableHash",
						"GenerateFileHash, GenerateTableHash exists(GenerateFileHash@HashKey == GenerateTableHash@HashKey,",
						"     negate:true,",
						"     broadcast: 'auto')~> CheckIfHaskKeyexists",
						"CheckIfHaskKeyexists derive(NewIsActive = 1,",
						"          StartDate = currentDate()) ~> AddIsActive",
						"AddIsActive select(mapColumn(",
						"          FirstName,",
						"          LastName,",
						"          CompanyName,",
						"          SalesPerson,",
						"          EmailAddress,",
						"          HashKey,",
						"          NewIsActive,",
						"          StartDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"GenerateTableHash, select1 exists(PractoseDBCustomer@FirstName == select1@FirstName",
						"     && PractoseDBCustomer@LastName == select1@LastName,",
						"     negate:false,",
						"     broadcast: 'auto')~> CheckTblrecordVsSelect1",
						"CheckTblrecordVsSelect1 derive(IsActive = 0,",
						"          EndDate = currentDate()) ~> AddIsActive0",
						"AddIsActive0 alterRow(updateIf(true())) ~> alterRow1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          IsActive as boolean,",
						"          EffectiveStartDate as timestamp,",
						"          EndDate as timestamp,",
						"          CreatedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          FirstName,",
						"          LastName,",
						"          CompanyName,",
						"          SalesPerson,",
						"          EmailAddress,",
						"          IsActive = NewIsActive,",
						"          EffectiveStartDate = StartDate",
						"     )) ~> PractiseCustomerTable",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          IsActive as boolean,",
						"          EffectiveStartDate as timestamp,",
						"          EndDate as timestamp,",
						"          CreatedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['FirstName','LastName','CustomerID'],",
						"     skipKeyWrites:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          CompanyName,",
						"          SalesPerson,",
						"          EmailAddress,",
						"          IsActive,",
						"          EffectiveStartDate,",
						"          EndDate,",
						"          CreatedDate",
						"     )) ~> PractiseCustomerTableExisting"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_IngestProductData_SQLtoDataLake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from SQL to Datalake",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_Mission100DataLake_productcsv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-03T04:44:33Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_IngestdynamicInputParameter_sql_blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from given table to data lake",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT * FROM ',pipeline().parameters.schemaname,'.',pipeline().parameters.tablename)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_dynamic_azuresql",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_dynamic_datalake",
								"type": "DatasetReference",
								"parameters": {
									"table": {
										"value": "@concat(pipeline().parameters.tablename,'.txt')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"tablename": {
						"type": "string",
						"defaultValue": "customer"
					},
					"schemaname": {
						"type": "string",
						"defaultValue": "SalesLT"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-31T18:42:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_split_table_multiplecsv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DISTINCT CategoryName\nFROM [SalesLT].[ProductDetails]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select * from salesLt.ProductDetails (NOLOCK) WHERE CategoryName = ','''',item().CategoryName,'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_dynamic_datalake",
											"type": "DatasetReference",
											"parameters": {
												"table": {
													"value": "@concat(item().CategoryName,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-31T20:11:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Ingest_blobCSV_SQLTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy csv file from data lake to Azure sql table",
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_dynamic_datalake",
								"type": "DatasetReference",
								"parameters": {
									"table": "Touring bikes.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-01T20:57:34Z"
			},
			"dependsOn": []
		}
	]
}